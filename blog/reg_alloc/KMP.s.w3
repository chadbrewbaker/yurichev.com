#RDI - haystack
#RSI - haystack_size
#RDX - needle
#RCX - needle_size

	.text
	.globl	kmp_search
	.type	kmp_search, @function
kmp_search:
	testq	%rcx, %rcx            # use rcx
	movq	%rdi, %rax            # use rdi, def: rax
	je	.exit
	leaq	(%rcx,%rdx), %r11     # use rcx, rdx, def: r11
	movq	%rdx, %r9             # use rdx, def: r9
	leaq	8+T(%rip), %r8        # def: r8
	pushq	%rbx
	movq	$-1, T(%rip)
	cmpq	%r9, %r11             # use r9, r11
	leaq	-8(%r8), %r10         # use r8, def r10
	je	.L20
.L6:
	movq	-8(%r8), %rax         # use r8, def rax
	addq	$1, %rax              # use/def rax
	testq	%rax, %rax            # use rax
	movq	%rax, (%r8)           # use rax, r8
	jle	.L4
	movzbl	(%r9), %ebx           # use r9, def _bx
	cmpb	%bl, -1(%rdx,%rax)    # use _bx, rdx, rax
	jne	.L5
	jmp	.L4
.L21:
	movzbl	-1(%rdx,%rax), %ebx   # use rdx, rax, def: ebx
	cmpb	%bl, (%r9)            # use _bx, r9
	je	.L4
.L5:
	movq	-8(%r10,%rax,8), %rax # use r10, use/def: rax
	addq	$1, %rax              # use/def rax
	testq	%rax, %rax            # use rax
	movq	%rax, (%r8)           # use rax, r8
	jg	.L21
.L4:
	addq	$1, %r9               # use/def r9
	addq	$8, %r8               # use/def r8
	cmpq	%r9, %r11             # use r9, r11
	jne	.L6
.L20:
	leaq	T(%rip), %r9          # def: r9
	xorq	%rax, %rax            # def: rax
	xorq	%r8, %r8              # def: r8
.L7:
	cmpq	%r8, %rsi             # use: r8, rsi
	jbe	.L22
.L11:
	testq	%rax, %rax            # use: rax
	js	.L8
	movzbl	(%rdx,%rax), %ebx     # use: rdx, rax, def: rbx
	cmpb	%bl, (%rdi,%r8)       # use: rbx, rdi, r8
	je	.L8
	cmpq	%r8, %rsi             # use: r8, rsi
	movq	(%r9,%rax,8), %rax    # use: r9, rax, def: rax
	ja	.L11
.L22:
	xorq	%rax, %rax            # def: rax
	popq	%rbx
	ret
.L8:
	addq	$1, %rax              # use/def rax
	addq	$1, %r8               # use/def r8
	cmpq	%rax, %rcx            # use: rax, rcx
	jne	.L7
	subq	%rcx, %r8             # use: rcx, use/def: r8
	leaq	(%rdi,%r8), %rax      # use: rdi, r8, def: rax
	popq	%rbx
.exit:
	ret
	.comm	T,8192,32
