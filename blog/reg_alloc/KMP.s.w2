#RDI - haystack
#RSI - haystack_size
#RDX - needle
#RCX - needle_size

	.text
	.globl	kmp_search
	.type	kmp_search, @function
kmp_search:
	testq	%rcx, %rcx
	movq	%rdi, %rax
	je	.L16
	leaq	(%rcx,%rdx), %r11
	movq	%rdx, %r9
	leaq	8+T(%rip), %r8
	pushq	%rbx
	movq	$-1, T(%rip)
	cmpq	%r9, %r11
	leaq	-8(%r8), %r10
	je	.L20
.L6:
	movq	-8(%r8), %rax
	addq	$1, %rax
	testq	%rax, %rax
	movq	%rax, (%r8)
	jle	.L4
	movzbl	(%r9), %ebx
	cmpb	%bl, -1(%rdx,%rax)
	jne	.L5
	jmp	.L4
.L21:
	movzbl	-1(%rdx,%rax), %ebx
	cmpb	%bl, (%r9)
	je	.L4
.L5:
	movq	-8(%r10,%rax,8), %rax
	addq	$1, %rax
	testq	%rax, %rax
	movq	%rax, (%r8)
	jg	.L21
.L4:
	addq	$1, %r9
	addq	$8, %r8
	cmpq	%r9, %r11
	jne	.L6
.L20:
	leaq	T(%rip), %r9
	xorq	%rax, %rax
	xorq	%r8, %r8
.L7:
	cmpq	%r8, %rsi
	jbe	.L22
.L11:
	testq	%rax, %rax
	js	.L8
	movzbl	(%rdx,%rax), %ebx
	cmpb	%bl, (%rdi,%r8)
	je	.L8
	cmpq	%r8, %rsi
	movq	(%r9,%rax,8), %rax
	ja	.L11
.L22:
	xorq	%rax, %rax
	popq	%rbx
	ret
.L8:
	addq	$1, %rax
	addq	$1, %r8
	cmpq	%rax, %rcx
	jne	.L7
	subq	%rcx, %r8
	leaq	(%rdi,%r8), %rax
	popq	%rbx
	ret
.L16:
	rep ret
	.comm	T,8192,32
